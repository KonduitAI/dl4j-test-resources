node {
  name: "in_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 3
          }
        }
        tensor_content: "\220\275+\277\351\357d>\026\032L?\026\365\304=8 9?G\036\255>K\345:\277NZi?\332f\002\277\261\220y?\312\223\010\300\303/\032?\277\321\237\276\253\255[\277\325\260\344?\261\3600\277d\026\274>c\300\362\277\331\354\221\275\253\213\255\275\216\314L?B\314\300>\232\032`?\200J\020>\n\030\033?fH\027\300\250g\034?8\262f=-\232D\276WP\354=\330\205M?\214\306\267\277\265\250U\277^]\301=\335\260\214\277\035\311=\276\236\245\200=\357A\317?\337\350\203?a\341\031@@\267\025\277\372@\033\273\\!\315\277mg\316\277q|1\277b!\243\277i\003v?\032\\\337>\224%\367\276\267\352N?<\261\232?\275|w\277\303\272\313\277\260[\200?\021}\375>\243#{?\256A\303\276pY\200\276\247E\252?\311\336<=\241\2137\276u\353\245\277\255\222Z=+\333Y\2770\240\372\276\2576\327?A\354\321?\210\322\217?]\231\300=\310T\216?2Q\206?Q\240N?+\267\252?\3552Z<\256|\265?\320\236\336\276\323\311\035?\330\325)\277\234\255\376>\2039K>\374\275=\277\326\216\t\276\317uf\277\013\336\005\276q\346\206?\271\211\341\275URX>\020\260<?\260\277\024>\236\031\305\277\225\364\303>\326;\r?\276\240\006\275iC2\277l)\363\277\200\343\223?\231\264z>g\226v\277\216(E\277q\323!?z|\214\277j<\027\277\302\377\302?\327\327\003?\222y\246\277 ]\210>\026L\026\275iJ\271\277\237P\347\277T\220\200?\3761\304\277\303\344\203?o\224\302>\014\363\214\277\255\202\200\277\031\211\024\277H\302\321?9\266(>\205\304_?Z\n\253\275\034\217\\>\020\210\213\277\252\031.?\031\0007?p\372C?\005\252\272?\314Z\207?\304+%?tN\237?\037\037\244\277\"\251\000@\240\256\261\277g\t\010?S\346i?\331\257\362>\205\232\234?\270\206.>1=\215\277\t\267\276?\"\025:?\002\242\256\277D\"\351?-t\252?X\260\374\276\2162\225\277\372*\274\276\257\216\013\276xn\241\277\246\250\302?\035\r\213\277\335(e\276d\035-?p\232\336?fk\264>\202\227\\?l\026\254\276\266\251\220>\362\035\355==U\207>\215\213\002>\364\235\355<\323\245\212\276/\323I?h\223\357\276\005\246E\274\234\206\242\274\227\226 >p9\205?\234xx\276!\306\305\277\004\204\202\277\246\213\032\276\364\352f\277O\363\307?\225\335\346\275\307\363S>%,\024@\267-?\277|VT\300|\261\242>$p@?\360gK\277\341\\\216?G\231V\277\205\305\274\2770\240\020?0\315\346>\366\216\221\277Z\001\010\277\276Q=\277\204C\210>\356\004W\300"
      }
    }
  }
}
node {
  name: "in_0/read"
  op: "Identity"
  input: "in_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@in_0"
      }
    }
  }
}
node {
  name: "in_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "in_1/read"
  op: "Identity"
  input: "in_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@in_1"
      }
    }
  }
}
node {
  name: "random_crop/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\010\000\000\000\010\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "random_crop/GreaterEqual"
  op: "GreaterEqual"
  input: "random_crop/Shape"
  input: "in_1/read"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "random_crop/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "random_crop/All"
  op: "All"
  input: "random_crop/GreaterEqual"
  input: "random_crop/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "random_crop/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Need value.shape >= size, got "
      }
    }
  }
}
node {
  name: "random_crop/Assert/Assert"
  op: "Assert"
  input: "random_crop/All"
  input: "random_crop/Assert/Assert/data_0"
  input: "random_crop/Shape"
  input: "in_1/read"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 1000
    }
  }
}
node {
  name: "random_crop/control_dependency"
  op: "Identity"
  input: "random_crop/Shape"
  input: "^random_crop/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@random_crop/Shape"
      }
    }
  }
}
node {
  name: "random_crop/sub"
  op: "Sub"
  input: "random_crop/control_dependency"
  input: "in_1/read"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "random_crop/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "random_crop/add"
  op: "AddV2"
  input: "random_crop/sub"
  input: "random_crop/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "random_crop/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "random_crop/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "random_crop/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2147483647
      }
    }
  }
}
node {
  name: "random_crop/random_uniform"
  op: "RandomUniformInt"
  input: "random_crop/Shape_1"
  input: "random_crop/random_uniform/min"
  input: "random_crop/random_uniform/max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "seed"
    value {
      i: 1
    }
  }
  attr {
    key: "seed2"
    value {
      i: 30
    }
  }
}
node {
  name: "random_crop/mod"
  op: "FloorMod"
  input: "random_crop/random_uniform"
  input: "random_crop/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "random_crop"
  op: "Slice"
  input: "in_0/read"
  input: "random_crop/mod"
  input: "in_1/read"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
library {
}
