node {
  name: "in_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7787855863571167
      }
    }
  }
}
node {
  name: "in_0/read"
  op: "Identity"
  input: "in_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@in_0"
      }
    }
  }
}
node {
  name: "assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "assert_positive/assert_less/Less"
  op: "Less"
  input: "assert_positive/Const"
  input: "in_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "assert_positive/assert_less/All"
  op: "All"
  input: "assert_positive/assert_less/Less"
  input: "assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "assert_positive/assert_less/All"
  input: "assert_positive/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "assert_positive/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "assert_positive/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "assert_positive/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^assert_positive/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "assert_positive/assert_less/Assert/AssertGuard/switch_t"
  input: "^assert_positive/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@assert_positive/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^assert_positive/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^assert_positive/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x > 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^assert_positive/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (in_0/read:0) = "
      }
    }
  }
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "assert_positive/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "assert_positive/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "assert_positive/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "assert_positive/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "assert_positive/assert_less/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "assert_positive/assert_less/All"
  input: "assert_positive/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@assert_positive/assert_less/All"
      }
    }
  }
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "in_0/read"
  input: "assert_positive/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@in_0"
      }
    }
  }
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "assert_positive/assert_less/Assert/AssertGuard/switch_f"
  input: "^assert_positive/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@assert_positive/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
}
node {
  name: "assert_positive/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "assert_positive/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "assert_positive/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Add/y"
  op: "Const"
  input: "^assert_positive/assert_less/Assert/AssertGuard/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Add"
  op: "Add"
  input: "in_0/read"
  input: "Add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
library {
}
