node {
  name: "input_a"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 3
        }
        dim {
          size: 4
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "input_b"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "Tensordot/Shape"
  op: "Shape"
  input: "input_a"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Tensordot/axes"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Tensordot/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Tensordot/GreaterEqual"
  op: "GreaterEqual"
  input: "Tensordot/axes"
  input: "Tensordot/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/Cast"
  op: "Cast"
  input: "Tensordot/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Tensordot/mul"
  op: "Mul"
  input: "Tensordot/Cast"
  input: "Tensordot/axes"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Tensordot/Less"
  op: "Less"
  input: "Tensordot/axes"
  input: "Tensordot/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/Cast_1"
  op: "Cast"
  input: "Tensordot/Less"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Tensordot/add"
  op: "Add"
  input: "Tensordot/axes"
  input: "Tensordot/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/mul_1"
  op: "Mul"
  input: "Tensordot/Cast_1"
  input: "Tensordot/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/add_1"
  op: "Add"
  input: "Tensordot/mul"
  input: "Tensordot/mul_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Tensordot/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Tensordot/range"
  op: "Range"
  input: "Tensordot/range/start"
  input: "Tensordot/Rank"
  input: "Tensordot/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/ListDiff"
  op: "ListDiff"
  input: "Tensordot/range"
  input: "Tensordot/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/Gather"
  op: "Gather"
  input: "Tensordot/Shape"
  input: "Tensordot/ListDiff"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Tensordot/Gather_1"
  op: "Gather"
  input: "Tensordot/Shape"
  input: "Tensordot/add_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Tensordot/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Tensordot/Prod"
  op: "Prod"
  input: "Tensordot/Gather"
  input: "Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Tensordot/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Tensordot/Prod_1"
  op: "Prod"
  input: "Tensordot/Gather_1"
  input: "Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Tensordot/concat_1"
  op: "ConcatV2"
  input: "Tensordot/ListDiff"
  input: "Tensordot/add_1"
  input: "Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/stack"
  op: "Pack"
  input: "Tensordot/Prod"
  input: "Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Tensordot/transpose"
  op: "Transpose"
  input: "input_a"
  input: "Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/Reshape"
  op: "Reshape"
  input: "Tensordot/transpose"
  input: "Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/Shape_1"
  op: "Shape"
  input: "input_b"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Tensordot/axes_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "Tensordot/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Tensordot/GreaterEqual_1"
  op: "GreaterEqual"
  input: "Tensordot/axes_1"
  input: "Tensordot/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/Cast_2"
  op: "Cast"
  input: "Tensordot/GreaterEqual_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Tensordot/mul_2"
  op: "Mul"
  input: "Tensordot/Cast_2"
  input: "Tensordot/axes_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/Less_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Tensordot/Less_1"
  op: "Less"
  input: "Tensordot/axes_1"
  input: "Tensordot/Less_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/Cast_3"
  op: "Cast"
  input: "Tensordot/Less_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Tensordot/add_2"
  op: "Add"
  input: "Tensordot/axes_1"
  input: "Tensordot/Rank_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/mul_3"
  op: "Mul"
  input: "Tensordot/Cast_3"
  input: "Tensordot/add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/add_3"
  op: "Add"
  input: "Tensordot/mul_2"
  input: "Tensordot/mul_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Tensordot/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Tensordot/range_1"
  op: "Range"
  input: "Tensordot/range_1/start"
  input: "Tensordot/Rank_1"
  input: "Tensordot/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/ListDiff_1"
  op: "ListDiff"
  input: "Tensordot/range_1"
  input: "Tensordot/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/Gather_2"
  op: "Gather"
  input: "Tensordot/Shape_1"
  input: "Tensordot/ListDiff_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Tensordot/Gather_3"
  op: "Gather"
  input: "Tensordot/Shape_1"
  input: "Tensordot/add_3"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Tensordot/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Tensordot/Prod_2"
  op: "Prod"
  input: "Tensordot/Gather_2"
  input: "Tensordot/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Tensordot/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Tensordot/Prod_3"
  op: "Prod"
  input: "Tensordot/Gather_3"
  input: "Tensordot/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Tensordot/concat_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Tensordot/concat_3"
  op: "ConcatV2"
  input: "Tensordot/add_3"
  input: "Tensordot/ListDiff_1"
  input: "Tensordot/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/stack_1"
  op: "Pack"
  input: "Tensordot/Prod_3"
  input: "Tensordot/Prod_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Tensordot/transpose_1"
  op: "Transpose"
  input: "input_b"
  input: "Tensordot/concat_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/Reshape_1"
  op: "Reshape"
  input: "Tensordot/transpose_1"
  input: "Tensordot/stack_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot/MatMul"
  op: "MatMul"
  input: "Tensordot/Reshape"
  input: "Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Tensordot/concat_4/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Tensordot/concat_4"
  op: "ConcatV2"
  input: "Tensordot/Gather"
  input: "Tensordot/Gather_2"
  input: "Tensordot/concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tensordot"
  op: "Reshape"
  input: "Tensordot/MatMul"
  input: "Tensordot/concat_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\003\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transpose"
  op: "Transpose"
  input: "Tensordot"
  input: "transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "transpose"
  input: "BatchToSpaceND/block_shape"
  input: "BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchToSpaceND_1/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "BatchToSpaceND_1/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\005\000\000\000\004\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "BatchToSpaceND_1"
  op: "BatchToSpaceND"
  input: "BatchToSpaceND"
  input: "BatchToSpaceND_1/block_shape"
  input: "BatchToSpaceND_1/crops"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SpaceToDepth"
  op: "SpaceToDepth"
  input: "BatchToSpaceND_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "block_size"
    value {
      i: 2
    }
  }
}
node {
  name: "Round"
  op: "Round"
  input: "SpaceToDepth"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Variable"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 20
          }
        }
        tensor_content: "s\367\340{\247\033\250?\247\202\032\032\275\263\375?\334\177dY\360\331\342?9\365\020\337\352\027\366?\310^\021+\351\234\361?\325v\013K\223\220\350?SE7\310\213\361\364\277\242\315\001.JB\364\277\233\035\353\3366\306\375?/\243\374\261\301\010\367?&\327?\035\350f\375\277o\254\214\255\271\365\324?\302\274\350\236\234\330\343?\335\207j\365\266\355\256\277k\313;cF\255\342\277a\272\224|\037\225\371\277\344\330\347\313\325\251\363?\205\304\301\215\264R\327?\006\324\223\262\334\353\342?\nT#Y\001u\346?\272\275\234\315M_\361?*zsK\324\341\345?e\005\322\3622,\356\2772 \275l\360\337\346?\344B\221$pg\363\277K\020O\357E\014\324?B 2PTV\307\277}7\370\352\335T\336?\355\275_\026\263\345\262?\001\213ghg+\363?\267\273\330\240\264\332\340?\366\342\345T\250\276\335\277\244\217\347\362 3\345\277\337\367J\264la\346\277\265F5\212\245\220\363?Xg\301\025o\004\367\2773\243\004\031b&\321\277\221i\307k\024\245\325?\016*\332TUS\343\277/\n.\305\331\211\001@\013)\256\267\202\217\345?\034\224\017\365b(\351\277\350Q\240\304+\010\344\2771\363\236\252\226\266\342\277\240\037\021\201\306\345\324\277\002\n\201\010P\305\n\300\033w\321M\273\305\370\277\304\314\247\325\365\317\300?;a\251_\303I\340\277d\323w\231\365\373\372?\230\027\"i\234\033\323?\345\261\305\027\3658\264?\360\002vU\350u\325?Y\325\013\036\023\230\341\277\010\340\305\032F\023\000@8\242E\025.\244\345\277i\371\026\263S\202\272?Y\347\277\245[\177\277?\353\253\375\'/1\336?\302\324\223i\007\260\340?\3028\317n\264\220\373?\324v\342\035N\033\331\277k; \226\246\244\305?\360\1770\206X\321\340\277|\350Ob\321\357\352?|6\305\356!\260\342?f\216U@\205I\346?m=\"\304\313\255\354?!\277r@\306\342\340\277\254IU(\310\260\241\277\203\312\023\007\274I\331\277\304~d\255\256J\364\277\303\2621\323\345J\270\277\261\212b\340\364\315\310\277(2S\177\025\354\326?\262\371\223n\206n\370?\314\306\3453\251v\362\277N\363\311\214\302\314\305\277\217V?\360\005h\370?\367\221\224\260,\247\353\277\323\304\316\010\324_\353?m\026W3\353?\305?\237\246B7\341\277\345\277L\207\333d\354\221\364?R\334\324\261n\'\365?E\372\230\375\333\253\346\277\323\177\246:\004y\302?\334\342!A\2668\355?\213\221\277\223K\336\365?\003\016V\213\247\332\270\277\230\371\213\234I\236\263?\230)\24134\213\355?\355\323|\203B\035\312?\014\001`\200\352\034\346\277\204`_\3022\321\337\277C\322be\361R\343?\352\266\326\340\210\360\003@\020\3318\323\r\232\364?z\211%h\327=\003@\230\2526\363\301Y\364\277\020\330\274\325\234\300\347\277KYw\300\001\r\313?\315\235e\304\203\305\365\277\215D=.\236\235\324?B||6\017j\344?l+]yp\352\266\2777\004\031\224\254(\334?\223\214g\275\337\234\000@\307\204\326\214\351\346\322\277\313\364\231\371\2339\306?\253N\312\003\020\264\327?\353\023\265\276\270\300\364\277\367R\251\324\005\337\350?\213I\243Xo\371\360\277\272\345\254\033\223_\304?4\340`\253\260|\336?o+\336\311w\026\325?\200#\232\306P\237\337?cf\026x\305]\327?t\000\257\246\322\316\345\277\354\257\316~\006\225\376\277k\361\231%\267B\345\277\205\240<\372\273t\000@{P\301H\323\321\357\277\220\346\326\342\234h\363?\214\005\251o\302\010\365?\262\016\021\337\372P\377?\246\270\362\236\217xw\277\03126\272\006\332\357?\"\242d\314\357\342\365?\222\205\302\017\352\014\337\277P\373\n\344%\263\371?$\214n\027\244\314\005\300\332\361yP\213=\320?FLz\033]i\351\277r>\373\2647\023\355?\277\351\317\t\212\310\365?\351\016\252+\000-\324\277!\275\352q\370\345\360?P\306\025\252\0038\367\277\326\244\212f\035J\360\277\227\234g\034\251/\002\300\275ef*;S\372?\\\235\366\303\220c\355\277\221{Xk\332\367\216\277\342\007\316\\*:\360\277\002\315\257\276\256K\263?~\325\353ILe\353?\361\302\3726\221\241\341?\253\322hLt6\301\277;\353\2235\032a\354?\321\350z.\2533\352?\232\2015\360\246i\372\277(b\320\363z\302\350\277lC\234x\337\334\340\277%;\366x\035\341\352\277\023\224k\241\r0\351\277m\373\230$\370\007\334\277\234\317\234\200\321\274\341?\271\361d|\307\223\367?\020\307\353I\317\243r\277\370\251\271z\0024\276\277\374\212&\266\255-\341\277\200)\363\017\332|\375?\027\247<Y\022(\342\277\324\363\343\334\022\363\302?J\310\303\361\'C\337?U\337\031\272;\341\362?\365\236\024\311,\270\342\277\314_\241\323!4\350\277\325U;L\207I\302\277 zN\343\225*\303\277\265\313\315\337\231\360\010@\366\317\255\030nB\323\277\241\303\255v\233\365\353?\360\215\024\222\360X\337?\327\004\231\357t\243\345\277|\013\307Ce\014\300\277\205\200\307X*\201\321?aB\270\021\332{\335?\366[\031\232Rm\303?\374\242\301\242\266\032\340?\265>[I\010\365\361\277$bqFnF\371\277r\364\223T}q\342?:pk\365p\300\351\277\250_\027DD\243\332\277tY\266\006|:\000\300.pd!\tC\366?\334<[\312\331R\353?Q\207C\256/\265\341?\317\305\2645\264\362\304\2771\331\210\241}\177\343\2777\214A\216\370D\315\277\242\366c\357\340\331\361?\273\264\211\274\276\022\370\277>\t\262\313\321S\261\277&\177\263@~5\342\277\001\203\036\220\007y\351\2778\252xIr/\363\277?\277K\025\367\312\367?\277\361\251U\270\362\360\277\265+\020Y\360\375\364\277\320\2102\201\330\327\364?\237\374V\223@\327\310?\353B\311\234\313v\313?<\261\305\261\025\310\347\277\2037\211dbL\364?\353\310\024s\307{\326\277e\224n\353>\211\360\277\373R\267,\251\337\361\277\320\273\302\352\252\254\316?\253\215!\003\242\211\272\277\313~=y\350\030\304\277]{\"1\245\213r?.\260`0m\364\343\277\264\316\346\321\262\333\326\277\212\355\030\"Wz\351\2779\271\2073\326r\337\277\352\266\361S\300\376\336?\026&\000W\357\211\003@[\347\203\260\224\250\322\277\021\323\307\262]\377\353?]]\344O\346\332\323? \273\t\024\263\373\337\277\251\234i\'\214_\341?\305\207`\0257\213\374?\355\262\271j\2466\366?\200(\237X\010`\340?\313H\210z\227%\360?\272\300\270\2420)\340?\031J\014?\231\014\365\277d\024\340n\356\204\325? ,#\030nN\324?G\303=\\\232\365\347\277O\224E\356H\225\343?\010\224V\370\257\260\367\277\257\302\321,\210c\345?\353\254\n\013\353\t\376?\017\3722#.\350\351\277\203t\352#\232\024\371\277\352\027\276\215\327!\000\300\3337(\304\017\354\351?[\310\037\231o\232\245\277\030u?l\267\204\343\277\367\3724mU\240\354\277}i\213n\031\226\374?\017\222\0230\234E\353\277\351\006\014>wA\274?\341u\266\214\356\352\323?6\017\211\375\200\243\365?\035\314\223R\242\250\355?*\032\2577\356\311\330\277P\205D\224\000\364\340\277\036\272\271\301\322>\000@\r\307z/L\023\240?\251E\372c\345\253\374?\210\253\355E\357\301\364\277\374\357F\'\240\201\356\277\235\027\275\211\224\n\362\277\366^5U\256m\364\277\210T\032M\026\307\305?k}\177qek\346\277[\220A6\031\210\363\277nr\222~\254\230\357\277\255\347\031$^.\357?\343\374\277:\000x\267?\304|\276\360G\231\371\277M\332%\307\323\035\325\277\367o\026\303zs\326?\207\230\343\007g[\356\277]/\247@m\023\331\277\267f\361\362\207\342\332?\337\350\302\376e\006\000\300\327\227de\032\255\367?\026\344\316\232\307\"\341\277S/4z\020 \350\277,\333\346q[\206\363\277\263\261+\027>\330\372\277\201\243\244tB\006\341\277\027\264\233\203/\372\346\277\020\232\305\376l\253\325?2Z\252\037B\203\317?H\276\242^%g\327\277=\216\226\245\357s\357\277/Y\227\177\027\014\316\277@{\036iw\210\374\277\377Og\025\253Y\332?h\007\200\250\331\304\332?`/C\314&\022\322?;d\244\267\250L\364?\026\001x\002\003\371\336?F\211\214\222(\211\304?\031n\362\242\364\032\351\277\237]\204H\351\230\345?.{\226\203\221\250\354?9^\370\335H)\365?\217\035r\311&@\341\277O\272\304O\nD\361?\225a\361\250\372<\352\277\316\003\323\201JU\346\277\342\3600\330\224g\354\2774q\204\330\317\013\265\277\247_\272\301B?\345\277\007\370\337\203P}\344?\2632\330\222\006\305\347?\363\021\n\267!\270\345?\332K\230\2758\245\363\277\345\316[\301\264t\315\277\365@\304\264\004\266\343?C\247\037\220JA\320?\303\362\311\025G\375\367\277\301\022\335\361\036\352\345\277\3504mq\003\240\371\277u\271y4\230E\334\277\325m\024\037\016J\344?\254#C\360<\256\272\277(\324\341e\302\316\352\277{\266\204\373\246\332\t@\340\035\266~\373\371\331\277"
      }
    }
  }
}
node {
  name: "Variable/read"
  op: "Identity"
  input: "Variable"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
}
node {
  name: "Add"
  op: "Add"
  input: "Variable/read"
  input: "Round"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "output"
  op: "Round"
  input: "Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
library {
}
