node {
  name: "in_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 5
          }
        }
        tensor_content: "0m4\347\376y\315?\344\033;\004\236p\351?\026..t\357%\352? \306G>\322\023\247?\230\303\330E)\235\327?,5\313k\013\350\345?\334m\034\311\255s\321?0\024\236\222\260\272\321?@\321\340\331\240{\316?v|\234\234\223o\356?\244&\\\214\314W\332?\270\376rL\357\224\331?\030\216\353R\253\023\332?*A<\365%\024\344?h\014\326CH\250\351?0\320Y{\256\\\261?\366\226\304\200\016\350\343?@cr\031B\026\323?\300Q\006<\213\200\303?\014\377 \310\035\271\320?"
      }
    }
  }
}
node {
  name: "in_0/read"
  op: "Identity"
  input: "in_0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@in_0"
      }
    }
  }
}
node {
  name: "in_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
        tensor_content: "\010Z\266\327\037@\306?l\331{-\346\013\354?\000\215j\032X\302\302?"
      }
    }
  }
}
node {
  name: "in_1/read"
  op: "Identity"
  input: "in_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@in_1"
      }
    }
  }
}
node {
  name: "unstack"
  op: "Unpack"
  input: "in_0/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 6
          }
        }
        tensor_content: "\240:\360-\373\241\326?\361\231.\020nn\325\277\344\217w\222\352\323\312\277\361\213G[\300O\343\277\230\220\217\010=\'\311?\330\034\250J\210\311\323?FJx\247%V\341?n\220\237\n\2076\322?\336y\003\200\203#\323?\000\365\227\202r\034k\277<\264\005\"n\305\344?\0302\333\025N\300\337?\014\332\335dB\025\343?4Z\324\224r\n\305?\nO\\\004\241\265\340\277Pd\024\322\203D\267?\254\"\214\201\273\034\303\277\340\253\350\023\230\003\275\277B&N\270\367\216\325?\360 \317\277\005\370\244\277&$\020Tl;\336\277\226+\353Z6t\324\277`x\344\264\247{\235?Tr\371r?q\337?\016\243\260\227\2451\344?\314\365\252\266\035\241\340\277\237\004\036\031\317\035\343\277\314\323\267jK\351\321?\004\r\344\257\251\371\332?\034\253\314\276\371\313\306?\260\256B\374\001 \334?\207B\247\310)\222\323\277\020]\333\033\237\322\307?\325~\353\373B\377\337\277\000p\276<dn\"?\364V\373E\254>\316?\256\351\334\376b\320\316\277\327\247\333\306\305\260\340\277(x\013\313\246c\262\277 :\373\r}]\265\277\254\330\244\234\244Q\341?:J\247\366UP\325?bj\226~\210\311\342?X9\216\271\031\342\271\277\236\266\214\260r\357\324?d\375\201`v\334\301?& \272\344\352\307\321\277\350A<9\250\367\343\277"
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/read"
  op: "Identity"
  input: "rnn/gru_cell/gates/kernel"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 6
          }
        }
        tensor_content: "\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?"
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/read"
  op: "Identity"
  input: "rnn/gru_cell/gates/bias"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 3
          }
        }
        tensor_content: "\n\222\220`<\362\343?\350\215\325$\243\310\311?\0300\336<)\252\337?\376\027\245\210e\014\321\277\000\343\350\337$\367\211\277\016\353.\331v\017\342\277\030-\266ohu\277\277\302\003\2218|y\317\277h\205\207\312\226\232\330?i\000\231\026\304\305\343\277\255ESY]\246\332\277\344\345\265\370\256\302\334?\340\225f\273\016#\345\277E\245%<\035\\\346\277\3341\262\303\356\027\344\277Lk\214[\220\000\334?\2450\343\202\246i\346\277\341\202\204\224S\342\334\277!U}\014\356\233\331\2770\321\252\326\324\235\336?\350}\362\226b\230\300?\270\275\326\322\221|\310?D\266\222\253\347\271\323?\312\n\273c[\211\343?"
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/read"
  op: "Identity"
  input: "rnn/gru_cell/candidate/kernel"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/read"
  op: "Identity"
  input: "rnn/gru_cell/candidate/bias"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/gru_cell/concat"
  op: "ConcatV2"
  input: "unstack"
  input: "in_1/read"
  input: "rnn/gru_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/gru_cell/MatMul"
  op: "MatMul"
  input: "rnn/gru_cell/concat"
  input: "rnn/gru_cell/gates/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/gru_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn/gru_cell/MatMul"
  input: "rnn/gru_cell/gates/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/gru_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn/gru_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/split/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/gru_cell/split"
  op: "Split"
  input: "rnn/gru_cell/split/split_dim"
  input: "rnn/gru_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "rnn/gru_cell/mul"
  op: "Mul"
  input: "rnn/gru_cell/split"
  input: "in_1/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/gru_cell/concat_1"
  op: "ConcatV2"
  input: "unstack"
  input: "rnn/gru_cell/mul"
  input: "rnn/gru_cell/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/gru_cell/MatMul_1"
  op: "MatMul"
  input: "rnn/gru_cell/concat_1"
  input: "rnn/gru_cell/candidate/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/gru_cell/BiasAdd_1"
  op: "BiasAdd"
  input: "rnn/gru_cell/MatMul_1"
  input: "rnn/gru_cell/candidate/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/gru_cell/Softsign"
  op: "Softsign"
  input: "rnn/gru_cell/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/mul_1"
  op: "Mul"
  input: "rnn/gru_cell/split:1"
  input: "in_1/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/sub"
  op: "Sub"
  input: "rnn/gru_cell/sub/x"
  input: "rnn/gru_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/mul_2"
  op: "Mul"
  input: "rnn/gru_cell/sub"
  input: "rnn/gru_cell/Softsign"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/add"
  op: "Add"
  input: "rnn/gru_cell/mul_1"
  input: "rnn/gru_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/gru_cell/concat_2"
  op: "ConcatV2"
  input: "unstack:1"
  input: "rnn/gru_cell/add"
  input: "rnn/gru_cell/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/gru_cell/MatMul_2"
  op: "MatMul"
  input: "rnn/gru_cell/concat_2"
  input: "rnn/gru_cell/gates/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/gru_cell/BiasAdd_2"
  op: "BiasAdd"
  input: "rnn/gru_cell/MatMul_2"
  input: "rnn/gru_cell/gates/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/gru_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "rnn/gru_cell/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/split_1/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/gru_cell/split_1"
  op: "Split"
  input: "rnn/gru_cell/split_1/split_dim"
  input: "rnn/gru_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "rnn/gru_cell/mul_3"
  op: "Mul"
  input: "rnn/gru_cell/split_1"
  input: "rnn/gru_cell/add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/concat_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/gru_cell/concat_3"
  op: "ConcatV2"
  input: "unstack:1"
  input: "rnn/gru_cell/mul_3"
  input: "rnn/gru_cell/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/gru_cell/MatMul_3"
  op: "MatMul"
  input: "rnn/gru_cell/concat_3"
  input: "rnn/gru_cell/candidate/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/gru_cell/BiasAdd_3"
  op: "BiasAdd"
  input: "rnn/gru_cell/MatMul_3"
  input: "rnn/gru_cell/candidate/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/gru_cell/Softsign_1"
  op: "Softsign"
  input: "rnn/gru_cell/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/mul_4"
  op: "Mul"
  input: "rnn/gru_cell/split_1:1"
  input: "rnn/gru_cell/add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/sub_1"
  op: "Sub"
  input: "rnn/gru_cell/sub_1/x"
  input: "rnn/gru_cell/split_1:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/mul_5"
  op: "Mul"
  input: "rnn/gru_cell/sub_1"
  input: "rnn/gru_cell/Softsign_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/add_1"
  op: "Add"
  input: "rnn/gru_cell/mul_4"
  input: "rnn/gru_cell/mul_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/concat_4/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/gru_cell/concat_4"
  op: "ConcatV2"
  input: "unstack:2"
  input: "rnn/gru_cell/add_1"
  input: "rnn/gru_cell/concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/gru_cell/MatMul_4"
  op: "MatMul"
  input: "rnn/gru_cell/concat_4"
  input: "rnn/gru_cell/gates/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/gru_cell/BiasAdd_4"
  op: "BiasAdd"
  input: "rnn/gru_cell/MatMul_4"
  input: "rnn/gru_cell/gates/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/gru_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "rnn/gru_cell/BiasAdd_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/split_2/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/gru_cell/split_2"
  op: "Split"
  input: "rnn/gru_cell/split_2/split_dim"
  input: "rnn/gru_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "rnn/gru_cell/mul_6"
  op: "Mul"
  input: "rnn/gru_cell/split_2"
  input: "rnn/gru_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/concat_5/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/gru_cell/concat_5"
  op: "ConcatV2"
  input: "unstack:2"
  input: "rnn/gru_cell/mul_6"
  input: "rnn/gru_cell/concat_5/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/gru_cell/MatMul_5"
  op: "MatMul"
  input: "rnn/gru_cell/concat_5"
  input: "rnn/gru_cell/candidate/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/gru_cell/BiasAdd_5"
  op: "BiasAdd"
  input: "rnn/gru_cell/MatMul_5"
  input: "rnn/gru_cell/candidate/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/gru_cell/Softsign_2"
  op: "Softsign"
  input: "rnn/gru_cell/BiasAdd_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/mul_7"
  op: "Mul"
  input: "rnn/gru_cell/split_2:1"
  input: "rnn/gru_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/sub_2"
  op: "Sub"
  input: "rnn/gru_cell/sub_2/x"
  input: "rnn/gru_cell/split_2:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/mul_8"
  op: "Mul"
  input: "rnn/gru_cell/sub_2"
  input: "rnn/gru_cell/Softsign_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/add_2"
  op: "Add"
  input: "rnn/gru_cell/mul_7"
  input: "rnn/gru_cell/mul_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/concat_6/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/gru_cell/concat_6"
  op: "ConcatV2"
  input: "unstack:3"
  input: "rnn/gru_cell/add_2"
  input: "rnn/gru_cell/concat_6/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/gru_cell/MatMul_6"
  op: "MatMul"
  input: "rnn/gru_cell/concat_6"
  input: "rnn/gru_cell/gates/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/gru_cell/BiasAdd_6"
  op: "BiasAdd"
  input: "rnn/gru_cell/MatMul_6"
  input: "rnn/gru_cell/gates/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/gru_cell/Sigmoid_3"
  op: "Sigmoid"
  input: "rnn/gru_cell/BiasAdd_6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/split_3/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/gru_cell/split_3"
  op: "Split"
  input: "rnn/gru_cell/split_3/split_dim"
  input: "rnn/gru_cell/Sigmoid_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "rnn/gru_cell/mul_9"
  op: "Mul"
  input: "rnn/gru_cell/split_3"
  input: "rnn/gru_cell/add_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/concat_7/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/gru_cell/concat_7"
  op: "ConcatV2"
  input: "unstack:3"
  input: "rnn/gru_cell/mul_9"
  input: "rnn/gru_cell/concat_7/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/gru_cell/MatMul_7"
  op: "MatMul"
  input: "rnn/gru_cell/concat_7"
  input: "rnn/gru_cell/candidate/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/gru_cell/BiasAdd_7"
  op: "BiasAdd"
  input: "rnn/gru_cell/MatMul_7"
  input: "rnn/gru_cell/candidate/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/gru_cell/Softsign_3"
  op: "Softsign"
  input: "rnn/gru_cell/BiasAdd_7"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/mul_10"
  op: "Mul"
  input: "rnn/gru_cell/split_3:1"
  input: "rnn/gru_cell/add_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/sub_3"
  op: "Sub"
  input: "rnn/gru_cell/sub_3/x"
  input: "rnn/gru_cell/split_3:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/mul_11"
  op: "Mul"
  input: "rnn/gru_cell/sub_3"
  input: "rnn/gru_cell/Softsign_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "rnn/gru_cell/add_3"
  op: "Add"
  input: "rnn/gru_cell/mul_10"
  input: "rnn/gru_cell/mul_11"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "rnn/gru_cell/add"
  input: "rnn/gru_cell/add_1"
  input: "rnn/gru_cell/add_2"
  input: "rnn/gru_cell/add_3"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat_1"
  op: "Identity"
  input: "rnn/gru_cell/add_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
library {
}
