node {
  name: "in_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        tensor_content: "~^G?L\033M?\236p9?\220ol>\356%:?X\2708><q\001?b|d?\224\316\013?\314al?P@\257=,5K?\326\271(?\3566\016?`u#>0\024\236>\240{\036>\240h\360>\222o~?v|\034?\346+-?HM8>v\312,?p\375e>@\235P=\030\216\353>$\024T?\250\004q>H\250y?h\014V?(W\204>\014t\326>\016\3503?\366\226D? \213\t?\24019?D\300\211>\0008\312;\340\310\005=0\374\203=\\\302W?\300\325??\200\206\232=\270\337\037?\220\272\262>\256L\024?\266\256\022?\300\214:>\262Z$?\240\020j?\350\225\232>\304\372\266>\020\204.>\"\350V?8\370\013?\320W\230=\202\256f?\222N(?\200!\323>`Zz>8|\331>6\231\005?\n\3721?\240\345\372>H\001]>\006ut?\330\357\r>(\033\036>ZY\t?\200\002\\<\310\'\325>\350$\025> ]\322>h_~>\030{\252>D?\230>l\344)?\270\376\302>\212\314]?H!B>F\304@?\336\2618?\346A)?\330\037:?z\005\022?\354{\210>4\315>?\000\3675=\370\317\232>\344U\370>rUL?\200\260\305=\302\306H?\366\353\001?P\347\254=^CV?\2449\034?\254\267\353>~\326\033?\264\000\\?@t\353>\244\341+?\324\202\214>\320\336J>\264\033\324>\322:H?|s\263>V\010\001?p\233\361=$\253T?\320\006:>Z\035X?\204\343\001?x\353\344>\220\261\002?F\246*?l\345\203>h\253o>r\033.? \303\207>z\024\n?\220\032\360>\216W\035?\300\340\367=\214\343\203>\360\220\235=,\267\355>(\267&>\000wO>\2146\301>\240.O=\264>\261>\264o\022?P\264\253=\364}\330>\340\363p=zB\t?\034\203\363>\240\217\201>@\0076>p\275\231=F\316e?x\304\272>\334\353\234>D\235\362>6\2163?`\001\345>\306b\004?X\2242>\210\213\262>\316\243F?\212\372r?\310\037T> k_>^\350&?DN\236>\362Vt?P\236@>\3645u?\200\3026>\014\256v?\004N\367>\244)(?\360\245\253>V\356\177?RB\026?\032\036\023?\200\373\302<\340\257\226>\276X\006?,\177\026?H\003:?0@I>\374\251j?\310\374x?\\\256k?@{T=\020m\231>\000\254};\356\343C?\364\277\014?\334A\302>4\036\302>H\241\264>\034\037\223>\270\347N?`J\362>\014?\341>p\036)?\274a\031?\000\350_;\360\216\371>P\"!?\270\0011?\2404\030=V\255\030?\2401\035=h\253\026?\300\273*=\262T4?J\254|?\264Hv?\034\031\357>\322\212\017?\344]p?\270\256\276>\200ea=\210%\004?\350H\257>ZL#?\260\252\364=`R\004?\256q\017?\020\274\270>\224\222\001?x.\252>\244\361\037?\364C\354>,I\327>\274^\023?\024\022\037?\246?3?\320\221\244=\240\207#>\314\306\211>\3006r?D\0364?\314:\021?T\t??L\351R?\000\271\226;\000vK>V\223#?\034^\322>D\2576?\346\231\017?\264\0200?8\244o?\000\tE?4LX?\214`\302>\224\331\240>\254g\355>\310@\270>\360\302\274=\220\322\225=\320E\340=\030\375\033>|\001\020?h\315m?\036\037l?\320\216\246=\320\225\271=\240\365\006=$y\206>p\311\016>\370.\034>\350\200/>\242\352??\360\342F?\032\tB?H\3356?p\0374>\\\323\224>\362\342\032?`J\321=\300\242\220>\304\002@?\"\\\005?NBl?\260\235\024?\334\213\371>\206\245X?\200a\346>\206\300+?\204\333\032?p\250\313=\320C\304>\370q\301>0)\'>\222e}?\356\353\026?\314d^?Nu7?x\026_?\000\320\027?\020\356>>\242\026B?4\372\341>\262\343~?\310(A?\204\006;?\264\245\036?F\202:?\220n\217=\010\241{?\272\014t?\006\'!?4\344\341>B1u?\2749(?l\272\346>\364\360T?\350\350\001?\254\n\301>~\2558?\320\330Q>@f&?l\261D?\270%C>\320\253\203=\266|l?\340\014h?|E\345>\300\263\360=\320\345\256>F\3509?\000\023!>v\003t?\0308\200>\212&\016?\274\372\275>\210\363t>\274@\271>@\300\034=\336\302\033?\010\235+>d\341\362>p\236W?\234\365^?8\300\342>\200\363\332<\340\245\001>\020\250*>@l\274=>xL?(^\366>V\260|?\322\003i?\034\235\304>\240t\306=|\315_?\320\371\300=\274\246.?\254\375\377>Xnw>\004\246\010?\030r\324>\254\200\373>,\261p?\370\350d>t^\333>x\226\366>L\242\002?\252\313v?\330\316\342>\240\241N?\364\177U?\324\202r?<*\214>\340\021\220=\202-P?\320\264s?\000\350\226=\014\270\003?\0004\226<x\264\022>\320\334\373=\000\307\352;\210\363*>p_\240>\270\202\300>\004G\t?\224q\204>T\022p?B\354)?\010\205\000>DLx?<}s?j\337l?Hk>?\350$*?\200\3575=D8\221>\3624x?\222\355B?V\223i?p\313`>\030xZ>@R\007>\220:\234>\000\250\331=\236\0243?\264\354\370>\200\000\242=\334\000\321>PO\006?\320\2434?\244\017\016?\240\207\232=B5??\220\031\033?8y\003?\014\234\313>\210\363M?\356\370K?\252E|?B\257-?T\253\370>D\343x?\260\031)>\334\367o?D\303.?`S\336>\354\013w?\000\\\"=\320mI?j%z?pM=?z\373A?>{\026?\000\270*;@\271\312=@\327{=@\217\274=x\237<?\236\023}?\374\254\203>d\316\335>\024\215\267>,s\032?\006\214p?H\246\265>\000\315\304>\020\253|>d\342\320>\014i\253>\230z\017?t\371\251>\220\352\261>\250t)>\320R\225=\354\317\315>\034\253m?\346\327??\330\256D>\264\233\262>\350\264q?\364\332\n?LUl?\240yH=\240\254\036?\274\354\247>\220\255\t?\36668?\020o\023?\320\t\305= \362\353=\222E@?\014\027;?@Z\257<\0142%?:\205e?26C?\204\007Y?\204\376\316>\304\334\355> \037\267>\300i\363>\240\326.>\244\257\007?\220\007\254=v\336\037?\014G\230>`\225\010>\3661_?\240\271\036=\2643\226>|=\222>(\233\253>\026\342!?\240\365\301>\204\237$?b\327\002?\004n\306>\200ai>\014q\217>\342\267\017?`L\305>$\242x?\314\200\037?n\253\000?\230\026\026>\214\357\340>\000=7<\360(8>\2003\325>\234\337T?\374\321\321>6N\033?"
      }
    }
  }
}
node {
  name: "in_0/read"
  op: "Identity"
  input: "in_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@in_0"
      }
    }
  }
}
node {
  name: "batch_normalization/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?"
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/read"
  op: "Identity"
  input: "batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "batch_normalization/beta/read"
  op: "Identity"
  input: "batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean/read"
  op: "Identity"
  input: "batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance/read"
  op: "Identity"
  input: "batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add"
  op: "Add"
  input: "batch_normalization/moving_variance/read"
  input: "batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization/batchnorm/Rsqrt"
  input: "batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "in_0/read"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization/moving_mean/read"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization/beta/read"
  input: "batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add_1"
  op: "Add"
  input: "batch_normalization/batchnorm/mul_1"
  input: "batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
library {
}
