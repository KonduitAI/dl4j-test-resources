node {
  name: "Variable"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 3
          }
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200?\000\000\000\000\000\000\200?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200?\000\000\000\000\000\000\200?"
      }
    }
  }
}
node {
  name: "Variable/read"
  op: "Identity"
  input: "Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
}
node {
  name: "in_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 3
          }
          dim {
            size: 4
          }
        }
        tensor_content: "\220\277\353\276X\374\227>\320\303\277>L+\r\277DAF?\220\032\235>\234\330S\277D\325e?\220\272\021\276\034\n%?\260\273(\277\230\331\252>,\304o\277\334\256t\277P-\234>\320YE>\300\355W>0i\275\276\360\322i\277 \322\316=(\235U\277\300+@?P\334\277>\310}\323>"
      }
    }
  }
}
node {
  name: "in_1/read"
  op: "Identity"
  input: "in_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@in_1"
      }
    }
  }
}
node {
  name: "in_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
        tensor_content: "l\306\333>8\301\230>\206\352c?"
      }
    }
  }
}
node {
  name: "in_2/read"
  op: "Identity"
  input: "in_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@in_2"
      }
    }
  }
}
node {
  name: "hinge_loss/ones_like/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "hinge_loss/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "hinge_loss/ones_like"
  op: "Fill"
  input: "hinge_loss/ones_like/Shape"
  input: "hinge_loss/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "hinge_loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "hinge_loss/mul"
  op: "Mul"
  input: "hinge_loss/mul/x"
  input: "Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "hinge_loss/Sub"
  op: "Sub"
  input: "hinge_loss/mul"
  input: "hinge_loss/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "hinge_loss/Mul_1"
  op: "Mul"
  input: "hinge_loss/Sub"
  input: "in_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "hinge_loss/Sub_1"
  op: "Sub"
  input: "hinge_loss/ones_like"
  input: "hinge_loss/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "hinge_loss/Relu"
  op: "Relu"
  input: "hinge_loss/Sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "hinge_loss/assert_broadcastable/static_dims_check_success"
  op: "NoOp"
}
node {
  name: "hinge_loss/Mul_2"
  op: "Mul"
  input: "hinge_loss/Relu"
  input: "in_2/read"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "hinge_loss/Const"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "hinge_loss/Sum"
  op: "Sum"
  input: "hinge_loss/Mul_2"
  input: "hinge_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "hinge_loss/num_present/Equal/y"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "hinge_loss/num_present/Equal"
  op: "Equal"
  input: "in_2/read"
  input: "hinge_loss/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "hinge_loss/num_present/zeros_like"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "hinge_loss/num_present/ones_like/Shape"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "hinge_loss/num_present/ones_like/Const"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "hinge_loss/num_present/ones_like"
  op: "Fill"
  input: "hinge_loss/num_present/ones_like/Shape"
  input: "hinge_loss/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "hinge_loss/num_present/Select"
  op: "Select"
  input: "hinge_loss/num_present/Equal"
  input: "hinge_loss/num_present/zeros_like"
  input: "hinge_loss/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "hinge_loss/num_present/broadcast_weights/assert_broadcastable/static_dims_check_success"
  op: "NoOp"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
}
node {
  name: "hinge_loss/num_present/broadcast_weights/ones_like/Shape"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  input: "^hinge_loss/num_present/broadcast_weights/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "hinge_loss/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  input: "^hinge_loss/num_present/broadcast_weights/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "hinge_loss/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "hinge_loss/num_present/broadcast_weights/ones_like/Shape"
  input: "hinge_loss/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "hinge_loss/num_present/broadcast_weights"
  op: "Mul"
  input: "hinge_loss/num_present/Select"
  input: "hinge_loss/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "hinge_loss/num_present/Const"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "hinge_loss/num_present"
  op: "Sum"
  input: "hinge_loss/num_present/broadcast_weights"
  input: "hinge_loss/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "hinge_loss/Const_1"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "hinge_loss/Sum_1"
  op: "Sum"
  input: "hinge_loss/Sum"
  input: "hinge_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "hinge_loss/Greater/y"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "hinge_loss/Greater"
  op: "Greater"
  input: "hinge_loss/num_present"
  input: "hinge_loss/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "hinge_loss/Equal/y"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "hinge_loss/Equal"
  op: "Equal"
  input: "hinge_loss/num_present"
  input: "hinge_loss/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "hinge_loss/ones_like_1/Shape"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "hinge_loss/ones_like_1/Const"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "hinge_loss/ones_like_1"
  op: "Fill"
  input: "hinge_loss/ones_like_1/Shape"
  input: "hinge_loss/ones_like_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "hinge_loss/Select"
  op: "Select"
  input: "hinge_loss/Equal"
  input: "hinge_loss/ones_like_1"
  input: "hinge_loss/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "hinge_loss/div"
  op: "RealDiv"
  input: "hinge_loss/Sum_1"
  input: "hinge_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "hinge_loss/zeros_like"
  op: "Const"
  input: "^hinge_loss/assert_broadcastable/static_dims_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "hinge_loss/value"
  op: "Select"
  input: "hinge_loss/Greater"
  input: "hinge_loss/div"
  input: "hinge_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
library {
}
